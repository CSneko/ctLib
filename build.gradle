import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.github.johnrengelman:shadow:8.1.1'
    }
}

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    //id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

version = project.mod_version
group = project.maven_group
def loader = project.hasProperty('loader') ? project.property('loader') : "Bukkit"


repositories {
    flatDir {
        dirs 'libs'  // 指定存放本地文件的文件夹路径
    }

    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    maven{
        name = 'Forge'
        url = 'https://files.minecraftforge.net/maven/'
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven{
        name = "alessiodp"
        url = "https://repo.alessiodp.com/releases/"
    }
    maven { url 'https://jitpack.io' }
    maven {
        url 'https://repo.nukkitx.com:443/maven-releases'
    }
    maven {
        url 'https://repo.nukkitx.com:443/maven-snapshots'
    }

    mavenCentral()
}





shadowJar {
    if (loader == "Fabric"){
        archiveFileName = "ctLibMod-${version}.jar"
    }else{
        archiveFileName = "ctLib-${version}.jar"
    }


    dependencies {
        if (loader == "Fabric") {
            //include(dependency("commons-codec:commons-codec:1.15"))
            include(dependency("org.xerial:sqlite-jdbc:3.41.2.2"))
            include(dependency(name: 'snakeyaml-2.2'))
        }
        include(dependency("net.byteflux:libby-velocity:1.3.0"))
        include(dependency("net.byteflux:libby-core:1.3.0"))
        include(dependency("net.byteflux:libby-bukkit:1.3.0"))
        include(dependency("net.byteflux:libby-paper:1.3.0"))
        include(dependency("net.byteflux:libby-slf4j:1.1.5"))
        include(dependency("net.byteflux:libby-nukkit:1.3.0"))
        //include(dependency("javax.servlet:javax.servlet-api:3.1.0"))
        //include(dependency("org.eclipse.jetty:jetty-server:9.4.46.v20220331"))
        //include(dependency("mysql:mysql-connector-java:8.0.26"))
        //include(dependency("com.sun.mail:javax.mail:1.6.2"))
        //include(dependency("javax.activation:activation:1.1.1"))
        //include(dependency("commons-codec:commons-codec:1.15"))
        //include(dependency("org.xerial:sqlite-jdbc:3.34.0"))
        //include(dependency("com.fasterxml.jackson.core:jackson-databind:2.12.5"))
        //include(dependency("com.fasterxml.jackson.core:jackson-core:2.12.5"))
        //include(dependency("com.fasterxml.jackson.core:jackson-annotations:2.12.5"))



    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    compileOnly 'org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT'
    //implementation 'javax.servlet:javax.servlet-api:3.1.0'
    //implementation 'org.eclipse.jetty:jetty-server:9.4.46.v20220331'
    implementation 'mysql:mysql-connector-java:8.0.28'
    //implementation 'com.sun.mail:javax.mail:1.6.2'
    //implementation 'javax.activation:activation:1.1.1'
    //implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.xerial:sqlite-jdbc:3.41.2.2'
    compileOnly "com.velocitypowered:velocity-api:3.2.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.2.0-SNAPSHOT"
    //implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0-rc1'
    //implementation "com.fasterxml.jackson.core:jackson-core:2.12.5"
    //implementation "com.fasterxml.jackson.core:jackson-annotations:2.12.5"
    implementation 'net.byteflux:libby-velocity:1.3.0'
    implementation 'net.byteflux:libby-core:1.3.0'
    implementation "net.byteflux:libby-bukkit:1.3.0"
    implementation "net.byteflux:libby-paper:1.3.0"
    implementation 'net.byteflux:libby-slf4j:1.1.5'
    implementation 'net.byteflux:libby-nukkit:1.3.0'
    implementation 'net.minecraftforge.gradle:ForgeGradle:6.0.14'
    //implementation 'net.minecraftforge:forge:1.20-46.0.14'
    implementation name: 'forge-1.20-46.0.14-universal'
    implementation name: 'forge-1.20-46.0.14-userdev'
    implementation name: 'fmlloader-1.20-46.0.14'
    implementation name: 'fmlcore-1.20-46.0.14'
    implementation name: 'javafmllanguage-1.20-46.0.14'
    implementation name: 'eventbus-6.2.0'
    implementation name: 'snakeyaml-2.2'
    implementation name: 'synapse-api-1.0-SNAPSHOT'
    implementation name: 'nukkit-1.0-SNAPSHOT'


}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 11
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

/*publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}*/

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
